#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

""" Import ancient OASIS CouchDB database into a Course. Unless you have
    the version of OASIS that used CouchDB, you don't need this.
"""

import sys
import os
import json

APPDIR = os.path.join(os.path.dirname(os.path.dirname(os.path.realpath(__file__))), "src")

sys.path.append(APPDIR)

from oasis.lib import Topics, Users, Courses, DB


def getCourse(coursename):
    """ Return the course or exit the program
    """
    try:
        course = Courses.get_course_by_name(coursename)
    except KeyError, err:
        print "Unable to find course %s" % coursename
        sys.exit(1)
    return course


def process_qtemplate(qt):
    """

    """
    parent = qt['parent']
    title = qt['v3_title']
    position = qt['position']

    if parent.startswith("0"):
        parent = parent[2:]
    topicname = ' '.join(parent.split("/"))
    topicname = topicname.strip()

    atts = qt['_attachments']
    for a in atts:
        print repr(a)

    sys.exit(0)

    if topicname not in topics:
        topics[topicname] = []
    else:
        topics[topicname].append({'title': title,
                                  'position': position})
    print repr(qt)


def createTopic(course, topicname):
    """ Create or return the topic.
    """
    topic = Topics.create(course['id'], topicname, 3, 1)
    print "Topic %s (%s) created" % (topic, topicname)
    return topic


def createQuestion(topicid, title, position, owner=1):
    """ Create a question entry and put it in the topic
        Return the question id
    """
    newid = DB.create_qt(owner, title, "", 0, 0.0, 1)
    DB.update_qt_practice_pos(newid, position)
    Topics.flush_num_qs(topicid)
   

if len(sys.argv) < 3:
    print "Usage: "
    print "    import_couch <coursename> <filename>"
    sys.exit(1)

topics = {}

uid = Users.uid_by_uname('admin')

course = getCourse(sys.argv[1])

fname = sys.argv[2]

data = json.load(open(fname))

types = {}
for e in data['docs']:
    parts = e['_id'].split("/")
#    if len(parts) > 1:
#       types[parts[1]] = "1"
    if u'doc_type' in e:
        dt = e[u'doc_type']
        if dt not in [u"Audit", u"QTemplate", u"QInstance", u"Topic"]:
            print e


sys.exit()


for e in data['docs']:
    if e['_id'].startswith("oasishs/qtemplate/"):
        process_qtemplate(e)

for topicname in topics.keys():
    tid = createTopic(course, topicname)
    for qt in topics[topicname]:
        createQuestion(tid, qt['title'], qt['position'], uid)
