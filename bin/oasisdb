#!/usr/bin/python
# -*- coding: utf-8 -*-


# Script to look at the OASIS database and make any fixes or
# upgrades if needed. Will prompt before doing anything too dangerous.

import os
import sys
from optparse import OptionParser

# we should be SOMETHING/bin/oasisdb, find APPDIR
# and add "SOMETHING/src" to our path
APPDIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(os.path.join(APPDIR, "src"))


def public_tables(db):
    """ Return a list of names of all tables in schema ("public" is default)
    """

    ret = db.run_sql("SELECT * FROM pg_stat_user_tables;")
    tables = [row[2] for row in ret]
    return tables


def num_records(db, table_name):
    """ How many rows are in the given table.
    """
    ret = db.run_sql('SELECT count(*) FROM "%s";' % table_name)
    num = int(ret[0][0])
    return num


def do_list_courses(db):
    """ Print a list of courses in the database.
    """
    # Use direct database access, partly this could be used for testing
    # OASIS own DB logic so we don't want to rely on that.

    # Remember we may have to check version
    ret = db.run_sql("SELECT course, title, description FROM courses;")
    courses = [{'id': row[0], 'name': row[1], 'title': row[2]}
               for row
               in ret]
    print "Course listing"
    for course in courses:
        print '%(id)s: %(name)s  (%(title)s)' % course
    else:
        print "There are no courses in the database."


def do_list_users(db):
    """ Print a list of courses in the database.
    """
    # Use direct database access, partly this could be used for testing
    # OASIS own DB logic so we don't want to rely on that.

    # Remember we may have to check version
    ret = db.run_sql("SELECT id, uname, givenname, familyname, email, confirmed FROM users;")
    users = [{'id': row[0],
              'uname': row[1],
              'givenname': row[2],
              'familyname': row[3],
              'email': row[4],
              'confirmed': row[5]}
             for row in ret]
    print "User listing"
    for user in users:
        if user['confirmed']:
            user['conf'] = "[email confirmed]"
        else:
            user['conf'] = "[email unconfirmed]"
        print "%(id)s: %(uname)s  (%(givenname)s %(familyname)s) %(email)s %(conf)s" % user
    else:
        print "There are no users in the database."


def do_show(db, c_args):
    """ User has done     oasisdb show something
    """
    if len(c_args) <= 1:
        c_args = ['show', 'help']

    if c_args[1] == "courses":
        return do_list_courses(db)
    elif c_args[1] == "users":
        return do_list_users(db)

    print "Usage:  oasisdb show <item>"
    print
    print "Where item is one of:"
    print "   courses      List all courses in the database"
    print "   users        List all users in the database"


def check_safe(db):
    """ Is it safe to do dangerous stuff to the database? Mainly tries to
        figure out if there is real data in it.
    """
    # If there are only 2 or fewer user accounts and questions, assume it's
    # ok.

    what = is_oasis_db(db)
    if what == "no":
        return False

    if what == "empty":
        return True

    users = num_records(db, "users")
    print '%s user records' % users
    qtemplates = num_records(db, "qtemplates")
    print '%s question templates' % qtemplates
    exams = num_records(db, "exams")
    print '%s assessments' % exams

    if users > 2:
        print "Contains non-default data."
        return False

    if qtemplates > 1:
        print "Contains non-default data."
        return False

    if exams > 0:
        print "Contains non-default data."
        return False

    return True


def is_oasis_db(db):
    """ Is this likely an OASIS database? Look at the table names to see
        if we have the more specific ones.
        Return "yes", "no", or "empty"
    """

    expect = ['qtvariations', 'users', 'examqtemplates', 'marklog', 'qtattach',
              'questions', 'guesses', 'exams', 'qtemplates']

    tables = public_tables(db)

    if len(tables) == 0:
        return "empty"

    if set(expect).issubset(tables):
        return "yes"

    return "no"


def calc_stats():
    """ Run stats generation over the whole database.
    """
    print "Calculating Statistics"
    from oasis.lib import Stats
    Stats.do_initial_stats_update()


def upgrade_3_6_to_3_9_4(db):
    """ Given a 3.6 database, upgrade it to 3.9.3
    """
    with open(os.path.join(APPDIR, "deploy", "migrate_36x_to_392.sql")) as f:
        sql = f.read()

    db.run_sql(sql)
    print "Migrated table structure from 3.6 to 3.9.2"

    calc_stats()

    with open(os.path.join(APPDIR, "deploy", "migrate_392_to_393.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.2 to 3.9.3"

    with open(os.path.join(APPDIR, "deploy", "migrate_393_to_394.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.3 to 3.9.4"

    if not options.noresetadmin:
        generate_admin_passwd(db)  # 3.6 passwords were in a slightly less secure format


def upgrade_3_9_1_to_3_9_4(db):
    """ Given a 3.9.1 database, upgrade it to 3.9.4.
    """
    with open(os.path.join(APPDIR, "deploy", "migrate_391_to_392.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.1 to 3.9.2"

    with open(os.path.join(APPDIR, "deploy", "migrate_392_to_393.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.2 to 3.9.3"

    with open(os.path.join(APPDIR, "deploy", "migrate_393_to_394.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.3 to 3.9.4"


def upgrade_3_9_2_to_3_9_4(db):
    """ Given a 3.9.2 database, upgrade it to 3.9.4.
    """
    with open(os.path.join(APPDIR, "deploy", "migrate_392_to_393.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.2 to 3.9.3"

    with open(os.path.join(APPDIR, "deploy", "migrate_393_to_394.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.3 to 3.9.4"


def upgrade_3_9_3_to_3_9_4(db):
    """ Given a 3.9.3 database, upgrade it to 3.9.4.
    """
    with open(os.path.join(APPDIR, "deploy", "migrate_393_to_394.sql")) as f:
        sql = f.read()
    db.run_sql(sql)
    print "Migrated table structure from 3.9.3 to 3.9.4"


def clean_install_3_6(db):
    """ Install a fresh blank v3.6 schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema_36x.sql")) as f:
        sql = f.read()

    db.run_sql(sql)
    print "Installed v3.6.x table structure."


def clean_install_3_9_1(db):
    """ Install a fresh blank v3.9.1 schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema_391.sql")) as f:
        sql = f.read()

    db.run_sql(sql)
    print "Installed v3.9.1 table structure."


def clean_install_3_9_2(db):
    """ Install a fresh blank v3.9.2 schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema_392.sql")) as f:
        sql = f.read()

    db.run_sql(sql)
    print "Installed v3.9.2 table structure."


def clean_install_3_9_3(db):
    """ Install a fresh blank v3.9.3 schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema_393.sql")) as f:
        sql = f.read()

    db.run_sql(sql)
    print "Installed v3.9.3 table structure."


def clean_install_3_9_4(db):
    """ Install a fresh blank v3.9.4 schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema_394.sql")) as f:
        sql = f.read()

    db.run_sql(sql)
    print "Installed v3.9.4 table structure."


def generate_admin_passwd(db):
    """ Generate a new random password for the admin account.
    """
    from oasis.lib import Users, OaConfig, Users2, Permissions

    ver = db.get_db_version()

    passwd = Users.gen_confirm_code()

    uid = Users.uid_by_uname('admin')
    if not uid:
        if ver == "3.6":
            sql = """
                INSERT INTO users (uname, passwd, givenname, familyname,
                                  acctstatus, student_id, email, expiry,
                                  source)
                VALUES ('admin', 'NOLOGIN', 'Admin', 'Account',
                        1, '', '', NULL,
                        'local');
                """
            db.run_sql(sql)
            uid = Users.uid_by_uname('admin')
        else:
            uid = Users.create(
                uname="admin",
                passwd="NOLOGIN",
                email=OaConfig.email,
                givenname="Admin",
                familyname="Account",
                acctstatus=1,
                studentid="",
                source="local",
                confirm_code="",
                confirm=True)

    Users2.set_password(uid, passwd)

    Permissions.add_perm(uid, 0, 1)  # superuser
    print "Admin password reset to: ", passwd


def cmd_options():
    """ Parse any command line options
    """

    descr = """OASIS Database Tool. Requires a configured OASIS setup,
    and can be used to initialize/upgrade the OASIS database."""
    usage = "%prog [--help] [--version] [command ...]"
    version = "%prog 3.9.4"
    oparser = OptionParser(usage=usage,
                           version=version,
                           description=descr)

    oparser.add_option("--erase-existing",
                       dest='eraseall',
                       default=False,
                       action='store_true',
                       help='erase any existing data first. DANGEROUS.')
    oparser.add_option("--no-reset-adminpw",
                       dest="noresetadmin",
                       default=False,
                       action='store_true',
                       help="don't reset the admin password")
    oparser.add_option("--oasis-ver",
                       dest='oaver',
                       metavar="X.Y.Z",
                       default='3.9.4',
                       help='work with a specific OASIS version. (default 3.9.3)')
    oparser.add_option("-v", "--verbose",
                       dest='verbose',
                       default=False,
                       action='store_true',
                       help='verbose output')
    (p_opts, p_args) = oparser.parse_args()
    return oparser, p_opts, p_args


def show_help():
    """ Show script usage help.
    """
    parser.print_help()
    print """
Commands:
    help                - Provide information about a specific command.
    status              - Show some status information about the database.
    show users          - List the users in the database.
    show courses        - List the courses in the database.
    resetpw             - Change the admin password.
    calcstats           - Refresh statistics calculation over whole database.

    init                - Set up the OASIS table structure in the database.
    upgrade             - Upgrade an older OASIS database to the newest version.
"""


def erase_existing(db):
    """ Remove the existing tables. DANGEROUS
    """
    with open(os.path.join(APPDIR, "deploy", "eraseexisting.sql")) as f:
        sql = f.read()
    print "Removing existing tables."
    db.run_sql(sql)


def do_status(db):
    """ Show some status information
    """

    from oasis.lib import OaConfig

    print "Connecting to database:"
    print "  host: ", OaConfig.dbhost
    print "  database: ", OaConfig.dbname
    print "  username: ", OaConfig.dbuname
    print

    what = is_oasis_db(db)
    if what == "empty":
        print "Empty database detected."
        print ""
        print "You can install a new one with:     oasisdb init"
        sys.exit()

    if what == "no":
        print "This appears not to be an OASIS database. Please make sure you"
        print "have the correct database settings in the configuration."
        sys.exit()

    print "There is already an OASIS database here."
    ver = db.get_db_version()
    print "Detected DB Version", ver
    print
    safe = check_safe(db)
    if safe:
        print
        print "However it does not contain much data so may be safe to erase:"
        print "    oasisdb init --erase-existing "
        sys.exit()

    print "It contains data, please be SURE you have the correct database"
    print "settings and wish to erase the existing data"
    print "before using the   --erase-existing   option."
    sys.exit()


def do_init(db, c_opts):
    """ Check the database looks fairly safe to mess with then, if so, setup
        our tables.
    """

    what = is_oasis_db(db)
    if what == "empty":
        print "Empty database detected, installing a clean setup:"
        print ""

        if c_opts.oaver == '3.6':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_6(db)
        elif c_opts.oaver == '3.9.1':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_1(db)
        elif c_opts.oaver == '3.9.2':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_2(db)
        elif c_opts.oaver == '3.9.3':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_3(db)
        elif c_opts.oaver == '3.9.4':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_4(db)
        else:
            print "Unknown database version (%s)" % (c_opts.oaver,)
            print "Available options:    3.6   3.9.1   3.9.2   3.9.3    3.9.4"
            sys.exit()
        if not c_opts.noresetadmin:
            generate_admin_passwd(db)
        print "Remember to restart OASIS if it's currently running."
        print "On Linux you can use:      sudo service apache2 restart"
        sys.exit()

    if what == "no":
        print "This appears not to be an OASIS database. Please make sure you"
        print "have the correct database settings in the configuration."
        sys.exit()

    print "There is already an OASIS database here."
    ver = db.get_db_version()
    print "Detected DB Version", ver
    print
    safe = check_safe(db)
    if c_opts.eraseall:
        if c_opts.oaver == '3.6':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_6(db)
        elif c_opts.oaver == '3.9.1':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_1(db)
        elif c_opts.oaver == '3.9.2':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_2(db)
        elif c_opts.oaver == '3.9.3':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_3(db)
        elif c_opts.oaver == '3.9.4':
            erase_existing(db)  # might be some dregs, like sequences or views
            clean_install_3_9_3(db)
        else:
            print "Unknown database version (%s)" % (c_opts.oaver,)
            print "Available options:   3.6   3.9.1     3.9.2    3.9.3      3.9.4"
            sys.exit()
        if not c_opts.noresetadmin:
            generate_admin_passwd(db)
        print "Remember to restart OASIS if it's currently running."
        print "On Linux you can use:      sudo service apache2 restart"
        sys.exit()

    if safe:
        print
        print "However it does not contain much data so may be safe to erase."
        print "To do so:     oasisdb init --erase-existing  "
        sys.exit()

    print "It contains data, please be SURE you have the correct database"
    print "settings and wish to erase the existing data"
    print "before using   the   --erase-existing   option."
    sys.exit()


def do_upgrade(db):
    """ Upgade the databse from an older version of OASIS.
    """

    dbver = db.get_db_version()
    if dbver == "3.6":
        upgrade_3_6_to_3_9_4(db)
        sys.exit()
    if dbver == "3.9.1":
        upgrade_3_9_1_to_3_9_4(db)
        sys.exit()
    if dbver == "3.9.2":
        upgrade_3_9_2_to_3_9_4(db)
        sys.exit()
    if dbver == "3.9.3":
        upgrade_3_9_3_to_3_9_4(db)
        sys.exit()
    if dbver == "3.9.4":
        print "Your database is already the latest version (3.9.4)"
        sys.exit()
    return


def do_help():
    """ Display more help about a command
    """
    print " Not Implemented"
    sys.exit()


if __name__ == "__main__":
    (parser, options, args) = cmd_options()

    if not args:
        show_help()
        sys.exit()

    from oasis.lib import DB

    if args[0] == 'help':
        do_help()
        sys.exit()

    if args[0] == 'init':
        do_init(DB, c_opts=options)
        sys.exit()

    if args[0] == 'upgrade':
        do_upgrade(DB)
        sys.exit()

    if args[0] == 'show':
        do_show(DB, c_args=args)
        sys.exit()

    if args[0] == 'calcstats':
        calc_stats()
        sys.exit()

    if args[0] == 'status':
        do_status(DB)
        sys.exit()

    if args[0] == 'resetpw':
        if not options.noresetadmin:  # silly, but maybe they did it
            generate_admin_passwd(DB)
        sys.exit()

    show_help()
