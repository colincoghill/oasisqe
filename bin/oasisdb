#!/usr/bin/python

# Script to look at the OASIS database and make any fixes or
# upgrades if needed. Will prompt before doing anything dangerous.

import os
import sys
from optparse import OptionParser

# we should be SOMETHING/bin/reset_admin_password, find APPDIR
# and add "SOMETHING/src" to our path
APPDIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(os.path.join(APPDIR, "src"))


# WARNING: We do imports later, after we've checked some things.


def public_tables():
    """ Return a list of names of all tables in schema ("public" is default)
    """

    ret = DB.run_sql("SELECT * FROM pg_stat_user_tables;")
    tables = [row[2] for row in ret]
    return tables


def num_records(table_name):
    """ How many rows are in the given table.
    """
    ret = DB.run_sql('SELECT count(*) FROM "%s";' % table_name)
    num = int(ret[0][0])
    return num


def check_safe():
    """ Is it safe to do dangerous stuff to the database? Mainly tries to
        figure out if there is real data in it.
    """

    # If there are only 2 or fewer user accounts and questions, assume it's
    # ok.

    what = is_oasis_db()
    if what == "no":
        return False

    if what == "empty":
        return True

    users = num_records("users")
    print '%s user records' % users
    qtemplates = num_records("qtemplates")
    print '%s question templates' % qtemplates
    exams = num_records("exams")
    print '%s assessments' % exams

    if users > 3:
        print "May contain critical data."
        return False

    if qtemplates > 2:
        print "May contain critical data."
        return False

    if exams > 0:
        print "May contain critical data."
        return False

    print "Probably doesn't contain critical data."
    return True


def is_oasis_db():
    """ Is this likely an OASIS database? Look at the table names to see
        if we have the more specific ones.
        Return "yes", "no", or "empty"
    """

    expect = ['qtvariations', 'users', 'examqtemplates', 'marks', 'qtattach',
              'questions', 'guesses', 'exams', 'qtemplates']

    tables = public_tables()

    if len(tables) == 0:
        return "empty"

    if set(expect).issubset(tables):
        return "yes"

    return "no"


def upgrade_3_6_to_3_9_2():
    """ Given a 3.6 database, upgrade it to 3.9.2.
    """

    raise NotImplementedError


def upgrade_3_9_1_to_3_9_2():
    """ Given a 3.9.1 database, upgrade it to 3.9.2.
    """

    raise NotImplementedError


def clean_install():
    """ Install a fresh blank schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema.sql")) as f:
        sql = f.read()

    DB.run_sql(sql)


def cmd_options():
    """ Parse any command line options
    """
    usage="%prog [--help] [--init] [--upgrade] [--version]"
    version="%prog 3.9.2"
    parser = OptionParser(usage=usage, version=version)

    parser.add_option("-i", "--init",
                      dest="init",
                      default=False,
                      action='store_true',
                      help="initialize db, creating table structure and admin account.")
    parser.add_option("-u", "--upgrade",
                      dest="upgrade",
                      default=False,
                      action='store_true',
                      help='upgrade the db to be compatible with this version of OASIS')

    return parser.parse_args()


if __name__ == "__main__":
    (options, args) = cmd_options()

    from oasis.lib import DB

    what = is_oasis_db()
    if what == "empty":
        print "Empty database detected, installing a clean setup:"
        print ""
        clean_install()
        sys.exit()

    if what == "no":
        print "This appears not to be an OASIS database. Please make sure you"
        print "have the correct database settings in the configuration."
        sys.exit()

    print "OASIS database detected"

    ver = DB.get_db_version()
    print "Detected DB Version", ver
    if not check_safe():
        print "Unsafe to continue."
        sys.exit()

