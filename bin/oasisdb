#!/usr/bin/python

# Script to look at the OASIS database and make any fixes or
# upgrades if needed. Will prompt before doing anything dangerous.

import os
import sys
from optparse import OptionParser

# we should be SOMETHING/bin/reset_admin_password, find APPDIR
# and add "SOMETHING/src" to our path
APPDIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
sys.path.append(os.path.join(APPDIR, "src"))


# WARNING: We do imports later, after we've checked some things.


def public_tables(DB):
    """ Return a list of names of all tables in schema ("public" is default)
    """

    ret = DB.run_sql("SELECT * FROM pg_stat_user_tables;")
    tables = [row[2] for row in ret]
    return tables


def num_records(DB, table_name):
    """ How many rows are in the given table.
    """
    ret = DB.run_sql('SELECT count(*) FROM "%s";' % table_name)
    num = int(ret[0][0])
    return num


def check_safe(DB):
    """ Is it safe to do dangerous stuff to the database? Mainly tries to
        figure out if there is real data in it.
    """

    # If there are only 2 or fewer user accounts and questions, assume it's
    # ok.

    what = is_oasis_db(DB)
    if what == "no":
        return False

    if what == "empty":
        return True

    users = num_records(DB, "users")
    print '%s user records' % users
    qtemplates = num_records(DB, "qtemplates")
    print '%s question templates' % qtemplates
    exams = num_records(DB, "exams")
    print '%s assessments' % exams

    if users > 2:
        print "Contains non-default data."
        return False

    if qtemplates > 1:
        print "Contains non-default data."
        return False

    if exams > 0:
        print "Contains non-default data."
        return False

    return True


def is_oasis_db(DB):
    """ Is this likely an OASIS database? Look at the table names to see
        if we have the more specific ones.
        Return "yes", "no", or "empty"
    """

    expect = ['qtvariations', 'users', 'examqtemplates', 'marks', 'qtattach',
              'questions', 'guesses', 'exams', 'qtemplates']

    tables = public_tables(DB)

    if len(tables) == 0:
        return "empty"

    if set(expect).issubset(tables):
        return "yes"

    return "no"


def upgrade_3_6_to_3_9_2(DB):
    """ Given a 3.6 database, upgrade it to 3.9.2.
    """

    raise NotImplementedError


def upgrade_3_9_1_to_3_9_2(DB):
    """ Given a 3.9.1 database, upgrade it to 3.9.2.
    """

    raise NotImplementedError


def clean_install(DB):
    """ Install a fresh blank schema.
    """

    with open(os.path.join(APPDIR, "deploy", "emptyschema.sql")) as f:
        sql = f.read()

    DB.run_sql(sql)
    print "Installed fresh tables."


def generate_admin_passwd(DB):
    """ Generate a new random password for the admin account.
    """
    from oasis.lib import Users, OaConfig, Users2, Permissions

    passwd = Users.gen_confirm_code()

    uid = Users.uid_by_uname('admin')
    if not uid:
        uid = Users.create(uname="admin",
                       passwd="NOLOGIN",
                       email=OaConfig.email,
                       givenname="Admin",
                       familyname="Account",
                       acctstatus=1,
                       studentid="",
                       source="local",
                       confirm_code="",
                       confirm=True)
    Users2.set_password(uid, passwd)

    Permissions.add_perm(uid, 0, 1)  # superuser
    print "You should be able to log in to OASIS as admin, with password: ", passwd


def cmd_options():
    """ Parse any command line options
    """
    usage="%prog [--help] [--init] [--upgrade] [--version]"
    version="%prog 3.9.2"
    parser = OptionParser(usage=usage,
                          version=version,
                          description="OASIS Database Tool. This can be used to initialize or upgrade an OASIS database. Usage with no options will display some status information. It requires an already configured OASIS setup.")

    parser.add_option("-i", "--init",
                      dest="init",
                      default=False,
                      action='store_true',
                      help="initialize db, creating table structure and admin account.")
    parser.add_option("-u", "--upgrade",
                      dest="upgrade",
                      default=False,
                      action='store_true',
                      help='upgrade the db to be compatible with this version of OASIS')
    parser.add_option("--erase-existing",
                      dest='eraseall',
                      default=False,
                      action='store_true',
                      help='erase any existing data first. DANGEROUS.')

    (options, args) = parser.parse_args()
    return parser, options, args


def erase_existing(DB):
    """ Remove the existing tables. DANGEROUS
    """
    with open(os.path.join(APPDIR, "deploy", "eraseexisting.sql")) as f:
        sql = f.read()
    print "Removing existing tables."
    DB.run_sql(sql)



def do_init(DB, opt_erase_existing=False):
    """ Check the database looks fairly safe to mess with then, if so, setup
        our tables.
    """

    what = is_oasis_db(DB)
    if what == "empty":
        print "Empty database detected, installing a clean setup:"
        print ""
        erase_existing(DB)  # might be some dregs, like sequences or views
        clean_install(DB)
        generate_admin_passwd(DB)
        sys.exit()

    if what == "no":
        print "This appears not to be an OASIS database. Please make sure you"
        print "have the correct database settings in the configuration."
        sys.exit()

    print "There is already an OASIS database here."
    ver = DB.get_db_version()
    print "Detected DB Version", ver
    print
    safe = check_safe(DB)
    if opt_erase_existing:
        erase_existing(DB)
        clean_install(DB)
        generate_admin_passwd(DB)
        sys.exit()

    if safe:
        print "However it does not contain much data so may be safe to erase."
        print "call with  --erase-existing "
        print "to do so."
        sys.exit()

    print "It contains data, please be SURE you have the correct database"
    print "settings and wish to erase the existing data"
    print "before using   the   --erase-existing   option."
    sys.exit()


def do_upgrade(DB):
    """ Upgade the databse from an older version of OASIS.
    """

    raise NotImplementedError


if __name__ == "__main__":
    (parser, options, args) = cmd_options()
    from oasis.lib import OaConfig


    print "Connecting to database:"
    print "  host: ", OaConfig.dbhost
    print "  database: ", OaConfig.dbname
    print "  username: ", OaConfig.dbuname
    print

    from oasis.lib import DB

    if options.init:
        do_init(DB, opt_erase_existing=options.eraseall)

    if options.upgrade:
        do_upgrade(DB)

    parser.print_help()


