#!/usr/bin/env python
# -*- coding: utf-8 -*-


# Script to look at the OASIS database and make any fixes or
# upgrades if needed. Will prompt before doing anything too dangerous.
#
# We try to be as independant of the installed version of OASIS as possible,
# just using its settings and DB layer to run sql directly.

import os
import sys
from optparse import OptionParser

# find installed copy of OASIS
UPTWO=os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
APPDIR=None

if "OASISLIB" in os.environ:
   APPDIR = os.environ["OASISLIB"]
elif os.path.isdir("/opt/oasisqe/3.9/src/oasis"):
   APPDIR = "/opt/oasisqe/3.9/src"
elif os.path.isdir("/opt/oasisqe/3.9/oasis"):
   APPDIR = "/opt/oasisqe/3.9"
elif os.path.isdir("%s/%s"%(UPTWO,"/oasis")):
   APPDIR = UPTWO
elif os.path.isdir("%s/%s"%(UPTWO,"/src/oasis")):
   APPDIR = UPTWO+"/src"

if not APPDIR:
    print "Unable to find installed OASIS code, normally at /opt/oasisqe/3.9/src"
    print "You can specify it in the OASIS lib environment variable on the commandline: "
    print "          OASISLIB=/opt/oasisqe/3.9/src oasisdb"
    exit(1)

print "using copy of OASIS installed at %s" % APPDIR

sys.path.append(APPDIR)


def _get_exams(db):
    """ Return a list of exam IDs """
    ret = db.run_sql("SELECT exam FROM exams ORDER BY exam;")
    if ret:
        return [int(row[0]) for row in ret]
    print "ERROR: Unable to query exams table"
    return []

def _get_exam_students(db, exam):
    """ Return a list of user IDs """
    if exam:
        ret = db.run_sql("SELECT student FROM examquestions WHERE exam=%s GROUP BY student;", (exam,))
    else:
        ret = db.run_sql("SELECT student FROM examquestions WHERE exam>=1 GROUP BY student;")

    return [int(row[0]) for row in ret]

def _get_student_all_variations(db, student):
    """
    Fetch all question variations a student as seen as a dictionary
    """
    ret = db.run_sql("SELECT qtemplate, variation, version, exam FROM questions WHERE student=%s ORDER BY qtemplate, variation, version;", (student,))
    return [(int(row[0]), int(row[1]), int(row[2]), int(row[3])) for row in ret]


def _get_student_exams(db, student):
    """ Return a list of exam IDs """
    ret = db.run_sql("SELECT exam FROM examquestions WHERE student=%s GROUP BY exam;", (student,))
    return [int(row[0]) for row in ret]

def _get_exam_questions(db, exam, student):
    """ Return a list of exam IDs """
    ret = db.run_sql("SELECT position, question FROM examquestions WHERE exam=%s AND student=%s;", (exam,student))
    return [(int(row[0]), int(row[1])) for row in ret]

def check_assess_duplication_1(db):
    """ Check assessments to see if questions have been reused from the same assessment,
        giving identical questions/answers.
    """
    count = 0
    progress = 0
    exams = _get_exams(db)
    for exam in exams:
        students = _get_exam_students(db, exam)
        progress += 1
        if progress == 10:
            progress = 0
            print
        print ".",
        for student in students:
            questions = _get_exam_questions(db, exam, student)
            qinstances = [qid for (pos, qid) in questions]
            uniques = set(qinstances)
            if len(uniques) < len(qinstances):
                print 
                print "Assessment %s, user %s, Type 1 Duplication: %s (question reused in same assessment)" % (exam, student, qinstances)
                count += 1
    print 
    return count

def check_assess_duplication_2(db):
    """ Check assessments to see if questions have been reused from a previous assessment 
        (and thus may have answers already filled in.)
    """
    count = 0
    progress = 0
    students = _get_exam_students(db, exam=None)
    for student in students:
        exams = _get_student_exams(db, student)
        progress += 1
        if progress == 25:
            progress = 0
            print
        print ".",
        qinstances = []
        for exam in exams:
            qids = [qid for (pos,qid) in _get_exam_questions(db, exam, student)]
            qinstances += qids
        uniques = set(qinstances)
        if len(uniques) < len(qinstances):
            print
            print "User %s, Type 2 Duplication: %s (question reused across exams)" % (student, qinstances)
            count += 1
    print
    return count

def check_assess_duplication_3(db):
    """ Check assessments to see if questions have been reused from practice
        (potentially having answers already filled in)
    """
    # questions    (student, qtemplate, variation, version, exam)
    count = 0
    progress = 0
    students = _get_exam_students(db, exam=None)
    for student in students:
        variations = _get_student_all_variations(db, student)   # [[qtemplate, variation, version, exam], ]
        progress += 1
        if progress == 25:
            progress = 0
            print
        print ".",
        cur = [0,0,0,0]
        for var in variations:
            if var[0] == cur[0] and var[1] == cur[1] and var[2] == cur[2]:
                print
                print "User %s, Type 3 Duplication: variation (%s,%s,%s,%s) with variation (%s,%s,%s,%s) (question from practice reused in assessment)" % (student, var[0], var[1], var[2], var[3], cur[0], cur[1], cur[2], cur[3])
                count += 1
    print
    return count


def do_diagnose_db(db):
    """ Check the database for some problems that may have occurred in the past.
    """

    print "Checking Assessments for duplication type 1"
    count = check_assess_duplication_1(db)
    print "%d found" % count

    print "Checking Assessments for duplication type 2"
    count = check_assess_duplication_2(db)
    print "%d found" % count

    print "Checking Assessments for duplication type 3"
    count = check_assess_duplication_3(db)
    print "%d found" % count


def do_list_courses(db):
    """ Print a list of courses in the database.
    """
    # Use direct database access, partly this could be used for testing
    # OASIS own DB logic so we don't want to rely on that.

    # Remember we may have to check version
    ret = db.run_sql("SELECT course, title, description FROM courses;")
    courses = [{'id': row[0], 'name': row[1], 'title': row[2]}
               for row
               in ret]
    print "Course listing"
    for course in courses:
        print '%(id)s: %(name)s  (%(title)s)' % course
    else:
        print "There are no courses in the database."


def do_list_users(db):
    """ Print a list of courses in the database.
    """
    # Use direct database access, partly this could be used for testing
    # OASIS own DB logic so we don't want to rely on that.

    # Remember we may have to check version
    ret = db.run_sql("SELECT id, uname, givenname, familyname, email, confirmed FROM users;")
    users = [{'id': row[0],
              'uname': row[1],
              'givenname': row[2],
              'familyname': row[3],
              'email': row[4],
              'confirmed': row[5]}
             for row in ret]
    print "User listing"
    for user in users:
        if user['confirmed']:
            user['conf'] = "[email confirmed]"
        else:
            user['conf'] = "[email unconfirmed]"
        print "%(id)s: %(uname)s  (%(givenname)s %(familyname)s) %(email)s %(conf)s" % user
    else:
        print "There are no users in the database."


def do_show(db, c_args):
    """ User has done     oasisdb show something
    """
    if len(c_args) <= 1:
        c_args = ['show', 'help']

    if c_args[1] == "courses":
        return do_list_courses(db)
    elif c_args[1] == "users":
        return do_list_users(db)

    print "Usage:  oasisdb show <item>"
    print
    print "Where item is one of:"
    print "   courses      List all courses in the database"
    print "   users        List all users in the database"



def cmd_options():
    """ Parse any command line options
    """

    descr = """OASIS Database Tool. Requires a configured OASIS setup,
    and can be used to initialize/upgrade the OASIS database."""
    usage = "%prog [--help] [--version] [command ...]"
    version = "%prog 3.9.6"
    oparser = OptionParser(usage=usage,
                           version=version,
                           description=descr)

    oparser.add_option("--erase-existing",
                       dest='eraseall',
                       default=False,
                       action='store_true',
                       help='erase any existing data first. DANGEROUS.')
    oparser.add_option("--no-reset-adminpw",
                       dest="noresetadmin",
                       default=False,
                       action='store_true',
                       help="don't reset the admin password")
    oparser.add_option("--oasis-ver",
                       dest='oaver',
                       metavar="X.Y.Z",
                       default='3.9.6',
                       help='work with a specific OASIS version. (default 3.9.6)')
    oparser.add_option("-v", "--verbose",
                       dest='verbose',
                       default=False,
                       action='store_true',
                       help='verbose output')
    (p_opts, p_args) = oparser.parse_args()
    return oparser, p_opts, p_args


def show_help():
    """ Show script usage help.
    """
    parser.print_help()
    print """
Commands:
    help                - Provide information about a specific command.
    status              - Show some status information about the database.
    show users          - List the users in the database.
    show courses        - List the courses in the database.
    resetpw             - Change the admin password.
    calcstats           - Refresh statistics calculation over whole database.
    diagnose            - Check the database for potential problems.
    init                - Set up the OASIS table structure in the database.
    upgrade             - Upgrade an older OASIS database to the newest version.
"""


def do_status(db):
    """ Show some status information
    """

    from oasis.lib import OaConfig

    print "Connecting to database:"
    print "  host: ", OaConfig.dbhost
    print "  database: ", OaConfig.dbname
    print "  username: ", OaConfig.dbuname
    print

    what = db.is_oasis_db()
    if what == "empty":
        print "Empty database detected."
        print ""
        print "You can install a new one with:     oasisdb init"
        sys.exit()

    if what == "no":
        print "This appears not to be an OASIS database. Please make sure you"
        print "have the correct database settings in the configuration."
        sys.exit()

    print "There is already an OASIS database here."
    ver = db.get_db_version()
    print "Detected DB Version", ver
    print
    safe = DB.check_safe()
    if safe:
        print
        print "However it does not contain much data so may be safe to erase:"
        print "    oasisdb init --erase-existing "
        sys.exit()

    print "It contains data, please be SURE you have the correct database"
    print "settings and wish to erase the existing data"
    print "before using the   --erase-existing   option."
    sys.exit()


def do_init(db, c_opts):
    """ Check the database looks fairly safe to mess with then, if so, setup
        our tables.
    """

    what = db.is_oasis_db()
    if what == "empty":
        print "Empty database detected, installing a clean setup:"
        print ""

        if c_opts.oaver == '3.6':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_6()
        elif c_opts.oaver == '3.9.1':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_1()
        elif c_opts.oaver == '3.9.2':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_2()
        elif c_opts.oaver == '3.9.3':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_3()
        elif c_opts.oaver == '3.9.4':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_4()
        elif c_opts.oaver == '3.9.5':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_5()
        elif c_opts.oaver == '3.9.6':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_6()
        else:
            print "Unknown database version (%s)" % (c_opts.oaver,)
            print "Available options:    3.6   3.9.1   3.9.2   3.9.3   3.9.4   3.9.5   3.9.6"
            sys.exit()
        if not c_opts.noresetadmin:
            DB.generate_admin_passwd()
        print "Remember to restart OASIS if it's currently running."
        print "On Linux you can use:      sudo service apache2 restart"
        sys.exit()

    if what == "no":
        print "This appears not to be an OASIS database. Please make sure you"
        print "have the correct database settings in the configuration."
        sys.exit()

    print "There is already an OASIS database here."
    ver = db.get_db_version()
    print "Detected DB Version", ver
    print
    safe = db.check_safe()
    if c_opts.eraseall:
        if c_opts.oaver == '3.6':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_6()
        elif c_opts.oaver == '3.9.1':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_1()
        elif c_opts.oaver == '3.9.2':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_2()
        elif c_opts.oaver == '3.9.3':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_3()
        elif c_opts.oaver == '3.9.4':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_3()
        elif c_opts.oaver == '3.9.5':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_5()
        elif c_opts.oaver == '3.9.6':
            DB.erase_existing()  # might be some dregs, like sequences or views
            DB.clean_install_3_9_6()
        else:
            print "Unknown database version (%s)" % (c_opts.oaver,)
            print "Available options:   3.6   3.9.1   3.9.2   3.9.3   3.9.4   3.9.5  3.9.6"
            sys.exit()
        if not c_opts.noresetadmin:
            DB.generate_admin_passwd()
        print "Remember to restart OASIS if it's currently running."
        print "On Linux you can use:      sudo service apache2 restart"
        sys.exit()

    if safe:
        print
        print "However it does not contain much data so may be safe to erase."
        print "To do so:     oasisdb init --erase-existing  "
        sys.exit()

    print "It contains data, please be SURE you have the correct database"
    print "settings and wish to erase the existing data"
    print "before using   the   --erase-existing   option."
    sys.exit()


def do_help():
    """ Display more help about a command
    """
    print " Not Implemented"
    sys.exit()


if __name__ == "__main__":
    (parser, options, args) = cmd_options()

    if not args:
        show_help()
        sys.exit()

    from oasis.lib import DB

    if args[0] == 'help':
        do_help()
        sys.exit()

    if args[0] == 'init':
        do_init(DB, c_opts=options)
        sys.exit()

    if args[0] == 'upgrade':
        DB.do_upgrade(options)
        sys.exit()

    if args[0] == 'show':
        do_show(DB, c_args=args)
        sys.exit()

    if args[0] == 'calcstats':
        DB.calc_stats()
        sys.exit()

    if args[0] == 'status':
        do_status(DB)
        sys.exit()

    if args[0] == 'diagnose':
        do_diagnose_db(DB)
        sys.exit()

    if args[0] == 'resetpw':
        if not options.noresetadmin:  # silly, but maybe they did it
            DB.generate_admin_passwd()
        sys.exit()

    show_help()
